#!/bin/bash

llmr() {
    # Default values
    # local model="openai/o4-mini"
    local model="openai/gpt-4.1"
    local mode="default"
    local files=()
    local named_args=()
    local base_folder="$HOME/utils/llmr_py_runs"
    local use_reasoning=false  # Flag for reasoning mode
    local user_task_input=""   # Variable to store user task input
    local user_provided_task=false # Flag to track if user provided task via 'i'

    # Parse positional arguments
    if [[ $# -ge 1 ]]; then
        model="$1"
        shift
    fi

    if [[ $# -ge 1 ]]; then
        mode="$1"
        shift
    fi

    # Parse remaining arguments as files or named arguments
    while [[ $# -gt 0 ]]; do
        if [[ "$1" == "--"* ]]; then
            # Handle named arguments (--arg value format or --flag format)
            if [[ $# -gt 1 ]] && ! [[ "$2" == "--"* ]]; then
                named_args+=("$1" "$2")
                shift 2
            else
                named_args+=("$1") # Handle flags without values
                shift 1
            fi
        else
            # Handle file paths
            files+=("$1")
            shift
        fi
    done

    # Map mode numbers to names
    declare -A mode_map
    mode_map["1"]="default"
    mode_map["2"]="coding"
    mode_map["3"]="coding-prompt-generator"
    mode_map["4"]="code-analyst"

    # Map model letters to names
    declare -A model_map
    model_map["g"]="gemini-2.5-pro-preview-03-25"
    model_map["o"]="openai/gpt-4.1"
    model_map["c"]="claude-3.7-sonnet"

    # Interactive mode selection
    local confirmed=false
    while [[ "$confirmed" != true ]]; do
        local mode_folder_preview="$base_folder/$mode" # For display
        echo "Current settings:"
        echo "  Model: $model"
        echo "  Mode: $mode"
        if [[ "$user_provided_task" == true ]]; then
            echo "  Task: Provided via input (will override $mode_folder_preview/task.md)"
        else
            echo "  Task: From $mode_folder_preview/task.md"
        fi
        echo "  Reasoning mode: $(if $use_reasoning; then echo "ON"; else echo "OFF"; fi)"
        echo "  Files: ${files[*]}"
        echo "  Named args: ${named_args[*]}"
        echo ""
        echo "Options:"
        echo "  Press Enter to confirm and run"
        echo "  Type a number to change mode (1=default, 2=coding, 3=coding-prompt-generator, 4=code-analyst)"
        echo "  Type a letter to change model (g=gemini, o=openai, c=claude)"
        echo "  Type 'i' to input task text directly (press Ctrl+D when finished)"
        echo "  Type 'r' to toggle reasoning mode (for Claude model)"

        read -r choice

        if [[ -z "$choice" ]]; then
            confirmed=true
        elif [[ "$choice" =~ ^[1-4]$ ]]; then
            mode="${mode_map[$choice]}"
            user_task_input="" # Reset custom task if mode changes
            user_provided_task=false
        elif [[ "$choice" =~ ^[goc]$ ]]; then
            model="${model_map[$choice]}"
        elif [[ "$choice" == "i" ]]; then
            echo "Enter task text (press Ctrl+D when finished):"
            user_task_input=$(cat) # Read until EOF (Ctrl+D)
            if [[ -n "$user_task_input" ]]; then
                 user_provided_task=true
                 echo "Task input captured."
            else
                 echo "No task input provided."
                 user_provided_task=false # Ensure flag is false if input is empty
            fi
        elif [[ "$choice" == "r" ]]; then
            use_reasoning=$(! $use_reasoning; echo $?)
            use_reasoning=$([[ $use_reasoning -eq 0 ]])
        else
            echo "Invalid choice. Please try again."
        fi
        echo "--------------------------------------------" # Separator
    done

    # Create necessary directories for mode files (instructions, task)
    local mode_folder="$base_folder/$mode"
    mkdir -p "$mode_folder"

    # Ensure required files exist for prompt building
    touch "$mode_folder/instructions.md"
    # task.md is optional if user provides input

    # Build the prompt
    local prompt=""

    # Add instructions
    if [[ -f "$mode_folder/instructions.md" ]]; then
        prompt+="
<instructions>
$(cat "$mode_folder/instructions.md")
</instructions>

"
    fi

    # Add task: Prioritize user input, then fallback to task.md
    if [[ "$user_provided_task" == true ]]; then
        prompt+="<task>
$user_task_input
</task>

"
    elif [[ -f "$mode_folder/task.md" ]]; then
        touch "$mode_folder/task.md" # Ensure it exists if not provided by user
        prompt+="<task>
$(cat "$mode_folder/task.md")
</task>

"
    else
         echo "Warning: No task provided via input ('i') or found in $mode_folder/task.md"
    fi


    # Add context from files if provided
    if [[ ${#files[@]} -gt 0 ]]; then
        local context
        # Assuming files-to-prompt command exists and works as intended
        context=$(files-to-prompt "${files[@]}")
        prompt+="<context>
$context
</context>

"
    fi

    echo "Running Python LLMRunner with model: $model"
    echo "Mode: $mode"
    
    local model_provider=""
    if [[ "$model" == "openai/"* ]]; then
        model_provider="openai"
    elif [[ "$model" == "gemini"* ]]; then
        model_provider="gemini"
    elif [[ "$model" == "claude"* ]]; then
        model_provider="claude"
    else
        echo "Error: Could not determine model provider from model name: $model"
        exit 1
    fi

    local python_cli_args=()
    python_cli_args+=("--model_provider" "$model_provider")
    python_cli_args+=("--model_name" "$model")
    python_cli_args+=("--execution_type" "MODEL_NON_STREAM") 
    python_cli_args+=("--mode" "$mode")

    # Add existing named arguments
    python_cli_args+=("${named_args[@]}")

    if $use_reasoning && [[ "$model_provider" == "claude" ]]; then
        echo "Reasoning mode: ON (for Claude)"
        # Add --thinking flag and --thinking_budget, ensuring not to duplicate if already in named_args
        # For simplicity, we add them. More complex logic could check named_args.
        python_cli_args+=("--thinking")
        python_cli_args+=("--thinking_budget" "1025")
    fi
    
    echo "--------------------------------------------"
    # Call Python script with the assembled prompt via stdin and arguments
    # Ensure the path to llm_runner.py is correct
    echo -e "$prompt" | python "$HOME/.scripts/llmr_python/llm_runner.py" "${python_cli_args[@]}"
}

# Execute the function with script arguments
llmr "$@"
